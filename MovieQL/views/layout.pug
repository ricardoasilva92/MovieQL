doctype html
html
	head
		meta(name='viewport', content='width=device-width, initial-scale=1')
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1')
		script(src="/javascripts/jquery-3.3.1.min.js")
		link(rel='stylesheet', href='/bower_components/bootstrap/dist/css/bootstrap4-hello-world.min.css')
		//estes tres foi para corrigir o bug do bootstrap 4 em relação ao dropdown-toggle
		script(src='https://code.jquery.com/jquery-3.2.1.slim.min.js', integrity='sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN', crossorigin='anonymous')
		script(src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js', integrity='sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q', crossorigin='anonymous')
		script(src='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js', integrity='sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl', crossorigin='anonymous')

		meta(charset="UTF-8")
		link(rel='stylesheet', href='/stylesheets/style.css')
		script(src="/javascripts/pedidos.js")
		script.
				$(document).ready(function(){
				$("#movie").click(function(){
				$("#formMovie").toggle(1000);
				});
				});
		script.
				$(document).ready(function(){
				$("#person").click(function(){
				$("#formPerson").toggle(1000);
				});
				});
		script.
				$(document).ready(function(){
				$("#genre").click(function(){
				$("#formGenre").toggle(1000);
				});
				});						
		script.
				$(document).ready(function(){
				$("#country").click(function(){
				$("#formCountry").toggle(1000);
				});
				});
		script.
				$(document).ready(function(){
				$("#mpaa").click(function(){
				$("#formMpaa").toggle(1000);
				});
				});
		script.
				$(document).ready(function(){
				$("#studios").click(function(){
				$("#formStudios").toggle(1000);
				});
				});			

		style.
			* {
			box-sizing: border-box;
			}
			body {
			font: 16px Arial;
			}
			.navbar {
			margin-top:-30px !important; 
			margin-bottom: 20px;
			}	
			.autocomplete {
			/*the container must be positioned relative:*/
			position: relative;
			display: inline-block;
			}
			input {
			border: 1px solid transparent;
			background-color: #f1f1f1;
			padding: 10px;
			font-size: 16px;
			}
			input[type=text] {
			background-color: #f1f1f1;
			width: 100%;
			}
			input[type=submit] {
			background-color: DodgerBlue;
			color: #fff;
			cursor: pointer;
			}
			.autocomplete-items {
			position: absolute;
			border: 1px solid #d4d4d4;
			border-bottom: none;
			border-top: none;
			z-index: 99;
			/*position the autocomplete items to be the same width as the container:*/
			top: 100%;
			left: 0;
			right: 0;
			}
			.autocomplete-items div {
			padding: 10px;
			cursor: pointer;
			background-color: #fff;
			border-bottom: 1px solid #d4d4d4;
			}
			.autocomplete-items div:hover {
			/*when hovering an item:*/
			background-color: #e9e9e9;
			}
			.autocomplete-active {
			/*when navigating through the items using the arrow keys:*/
			background-color: DodgerBlue !important;
			color: #ffffff;
			}
			.btn-group button {
			background-color: #4CAF50; /* Green background */
			border: 1px solid green; /* Green border */
			color: white; /* White text */
			padding: 10px 24px; /* Some padding */
			cursor: pointer; /* Pointer/hand icon */
			float: left; /* Float the buttons side by side */
			}
			/* Clear floats (clearfix hack) */
			.btn-group:after {
			content: "";
			clear: both;
			display: table;
			}
			.btn-group button:not(:last-child) {
			border-right: none; /* Prevent double borders */
			}
			/* Add a background color on hover */
			.btn-group button:hover {
			background-color: #3e8e41;
			}
			.carousel-inner img {
			margin: auto;
			}
			.carousel-control-prev-icon,
			.carousel-control-next-icon {
			color: red;
			}
			.carousel-control-next-icon:after
			{
			content: '>';
			font-size: 45px;
			color: red;
			}

			.carousel-control-prev-icon:after {
			content: '<';
			font-size: 45px;
			color: red;
			}

	.jumbotron.jumbotron-fluid.text-center
		.container.center
			h1(style='margin-top:-20px;margin-bottom:-20px;font-family: Arial Black, Gadget, sans-serif;font-weight:normal;' ).display-1.text-warning MovieQL

	
	
	nav.navbar.navbar-expand-lg.navbar-dark.bg-primary
		button.navbar-toggler.navbar-toggler-right(type='button', data-toggle='collapse', data-target='#navbarTogglerDemo03', aria-controls='navbarTogglerDemo03', aria-expanded='false', aria-label='Toggle navigation', style='')
			span.navbar-toggler-icon
		a.navbar-brand(href='#!').text-warning Explore By
		#navbarTogglerDemo03.collapse.navbar-collapse
			ul.navbar-nav.mr-auto.mt-2.mt-md-0
				li.nav-item
					if workb
						a.nav-link(href='/explore')
							.text-warning  explorer
					else
						a.nav-link(href='/workbench')
							.text-warning  sparql
				li.nav-item
					a#movie.nav-link(href='#!') Movie
					form#formMovie(autocomplete='off', action='/explore', style='display:none;' )
						.autocomplete(style='width:300px;')
							input#myInput(type='text', name='myMovie', placeholder='Movie Title')
						input#myBtn( type='submit' hidden="hidden")
				li.nav-item
					a#person.nav-link(href='#!') Person
					form#formPerson(autocomplete='off', action='/explore', style='display:none;' )
						.autocomplete(style='width:300px;')
							input#myInputPerson(type='text', name='myPerson', placeholder='Person Name')
						input#myBtn2(type='submit' hidden="hidden")
						
				li.nav-item
					a#genre.nav-link(href='#!') Genre
					form#formGenre(autocomplete='off', action='/explore', style='display:none;' )
						.autocomplete(style='width:300px;')
							input#myInputGenre(type='text', name='myGenre', placeholder='Genre')
						input#myBtn3(type='submit' hidden="hidden")
				li.nav-item
					a#mpaa.nav-link(href='#!') Mpaa
					form#formMpaa(autocomplete='off', action='/explore', style='display:none;' )
						.autocomplete(style='width:300px;')
							input#myInputMpaa(type='text', name='myMpaa', placeholder='Mpaa')
						input#myBtn5(type='submit' hidden="hidden")
				li.nav-item
					a#country.nav-link(href='#!') Country
					form#formCountry(autocomplete='off', action='/explore', style='display:none;' )
						.autocomplete(style='width:300px;')
							input#myInputCountry(type='text', name='myCountry', placeholder='Country')
						input#myBtn4(type='submit' hidden="hidden")
				li.nav-item
					a#studios.nav-link(href='#!') Studios
					form#formStudios(autocomplete='off', action='/explore', style='display:none;' )
						.autocomplete(style='width:300px;')
							input#myInputStudios(type='text', name='myStudio', placeholder='Studio')
						input#myBtn6(type='submit' hidden="hidden")

				
			
				

	script.
		function autocomplete(inp, arr) {
		/*the autocomplete function takes two arguments,
		the text field element and an array of possible autocompleted values:*/
		var currentFocus;
		/*execute a function when someone writes in the text field:*/
		inp.addEventListener("input", function(e) {
		var a, b, i, val = this.value;
		/*close any already open lists of autocompleted values*/
		closeAllLists();
		if (!val) { return false;}
		currentFocus = -1;
		/*create a DIV element that will contain the items (values):*/
		a = document.createElement("DIV");
		a.setAttribute("id", this.id + "autocomplete-list");
		a.setAttribute("class", "autocomplete-items");
		/*append the DIV element as a child of the autocomplete container:*/
		this.parentNode.appendChild(a);
		/*for each item in the array...*/
		for (i = 0; i < arr.length; i++) {
		/*check if the item starts with the same letters as the text field value:*/
		if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
		/*create a DIV element for each matching element:*/
		b = document.createElement("DIV");
		/*make the matching letters bold:*/
		b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
		b.innerHTML += arr[i].substr(val.length);
		/*insert a input field that will hold the current array item's value:*/
		b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
		/*execute a function when someone clicks on the item value (DIV element):*/
		b.addEventListener("click", function(e) {
		/*insert the value for the autocomplete text field:*/
		inp.value = this.getElementsByTagName("input")[0].value;
		/*close the list of autocompleted values,
		(or any other open lists of autocompleted values:*/
		closeAllLists();
		});
		a.appendChild(b);
		}
		}
		});
		/*execute a function presses a key on the keyboard:*/
		inp.addEventListener("keydown", function(e) {
		var x = document.getElementById(this.id + "autocomplete-list");
		if (x) x = x.getElementsByTagName("div");
		if (e.keyCode == 40) {
		/*If the arrow DOWN key is pressed,
		increase the currentFocus variable:*/
		currentFocus++;
		/*and and make the current item more visible:*/
		addActive(x);
		} else if (e.keyCode == 38) { //up
		/*If the arrow UP key is pressed,
		decrease the currentFocus variable:*/
		currentFocus--;
		/*and and make the current item more visible:*/
		addActive(x);
		} else if (e.keyCode == 13) {
		/*If the ENTER key is pressed, prevent the form from being submitted,*/
		e.preventDefault();
		if (currentFocus > -1) {
		/*and simulate a click on the "active" item:*/
		if (x) x[currentFocus].click();
		}
		}
		});
		function addActive(x) {
		/*a function to classify an item as "active":*/
		if (!x) return false;
		/*start by removing the "active" class on all items:*/
		removeActive(x);
		if (currentFocus >= x.length) currentFocus = 0;
		if (currentFocus < 0) currentFocus = (x.length - 1);
		/*add class "autocomplete-active":*/
		x[currentFocus].classList.add("autocomplete-active");
		}
		function removeActive(x) {
		/*a function to remove the "active" class from all autocomplete items:*/
		for (var i = 0; i < x.length; i++) {
		x[i].classList.remove("autocomplete-active");
		}
		}
		function closeAllLists(elmnt) {
		/*close all autocomplete lists in the document,
		except the one passed as an argument:*/
		var x = document.getElementsByClassName("autocomplete-items");
		for (var i = 0; i < x.length; i++) {
		if (elmnt != x[i] && elmnt != inp) {
		x[i].parentNode.removeChild(x[i]);
		}
		}
		}
		/*execute a function when someone clicks in the document:*/
		document.addEventListener("click", function (e) {
		closeAllLists(e.target);
		});
		}

		
		/*arrays com conteudo para a navBar */
		var movies = !{JSON.stringify(movies_fromServer)}
		var persons = !{JSON.stringify(persons_fromServer)}
		var genres = !{JSON.stringify(genres_fromServer)}
		var countries = !{JSON.stringify(countries_fromServer)}
		var mpaa = !{JSON.stringify(mpaa_fromServer)}
		var studios = !{JSON.stringify(studios_fromServer)}

		
		autocomplete(document.getElementById("myInput"), movies);
		autocomplete(document.getElementById("myInputPerson"), persons);
		autocomplete(document.getElementById("myInputGenre"), genres);
		autocomplete(document.getElementById("myInputCountry"), countries);
		autocomplete(document.getElementById("myInputMpaa"), mpaa);
		autocomplete(document.getElementById("myInputStudios"), studios);
		

		
	script.
		var input = document.getElementById("myInput");
		input.addEventListener("keyup", function(event) {
		event.preventDefault();
		if (event.keyCode === 13) {
		document.getElementById("myBtn").click();
		}
		});
	script.
		var input = document.getElementById("myInputPerson");
		input.addEventListener("keyup", function(event) {
		event.preventDefault();
		if (event.keyCode === 13) {
		document.getElementById("myBtn2").click();
		}
		});
	script.
		var input = document.getElementById("myInputGenre");
		input.addEventListener("keyup", function(event) {
		event.preventDefault();
		if (event.keyCode === 13) {
		document.getElementById("myBtn3").click();
		}
		});
	script.
		var input = document.getElementById("myInputCountry");
		input.addEventListener("keyup", function(event) {
		event.preventDefault();
		if (event.keyCode === 13) {
		document.getElementById("myBtn4").click();
		}
		});
	script.
		var input = document.getElementById("myInputMpaa");
		input.addEventListener("keyup", function(event) {
		event.preventDefault();
		if (event.keyCode === 13) {
		document.getElementById("myBtn5").click();
		}
		});
	script.
		var input = document.getElementById("myInputStudios");
		input.addEventListener("keyup", function(event) {
		event.preventDefault();
		if (event.keyCode === 13) {
		document.getElementById("myBtn6").click();
		}
		});



	body
		block content
